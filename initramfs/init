#!/bin/sh

# Create all the symlinks to /bin/busybox
/bin/busybox --install -s /bin/

# Create dir structure needed for sys a proc mounts
mkdir -p /proc
mkdir -p /sys

# Mount things needed by this script
mount -t proc proc /proc
mount -t sysfs sysfs /sys

# Create device nodes
mdev -s

# Disable kernel messages from popping onto the screen
echo 0 > /proc/sys/kernel/printk

# Clear the screen
clear

# Defaults
init="/sbin/init"
root="LABEL=/"
home="LABEL=/home"
oldrootfs_path="/mnt/home/oldrootfs.tgz"
newrootfs_path="/mnt/home/centos-image.tgz"
backup_oldrootfs="false"

# Create needed mounting points
mkdir -p /mnt/root/boot
mkdir -p /mnt/home

# Function for parsing command line options
parse_kernel_cmdline() {
	echo "$@" | cut -d "=" -f 2
}

# Process command line options
for i in $(cat /proc/cmdline); do
	case $i in
		init\=*)
			init=$(parse_kernel_cmdline $i)
			;;
		root\=*)
			root=$(parse_kernel_cmdline $i)
			;;
		home\=*)
			home=$(parse_kernel_cmdline $i)
			;;
		backup_oldrootfs)
			backup_oldrootfs="true"
			;;
	esac
done

# Mount working partitions
echo "Mounting root and home partitions..."
mount "${root}" /mnt/root
mount "${home}" /mnt/home

# Read oldroofs boot partition
echo "Reading boot partition label from oldrootfs fstab..."
boot=`grep "boot" /mnt/root/etc/fstab | cut -d' ' -f1`
echo "Mounting boot partition: ${boot}..."
mount "${boot}" /mnt/root/boot

# Backup old rootfs
if [ "${backup_oldrootfs}" = "true" ]
then
	echo "Backing up old rootfs..."
	cd /mnt/root/
	tar czf "${oldrootfs_path}" .
	cd /
fi

# Backup fstab, network interfaces and hostname
echo "Backing up oldrootfs configs..."
mkdir -p /backup
cp -v /mnt/root/etc/fstab /backup/
cp -v /mnt/root/etc/sysconfig/network-scripts/ifcfg-eth0 /backup/
cp -v /mnt/root/etc/sysconfig/network-scripts/ifcfg-eth1 /backup/
cp -v /mnt/root/etc/sysconfig/network /backup/

# Wipe root partition
echo "Wipping root and boot partition..."
rm -rf /mnt/root/boot/*
umount /mnt/root/boot
rm -rf /mnt/root/*
mkdir -p /mnt/root/boot
mount "${boot}" /mnt/root/boot

# Install the new rootfs
echo "Installing the new rootfs..."
tar zxf "${newrootfs_path}" -C /mnt/root

# Restore fstab, network interfaces and hostname
echo "Restoring oldrootfs configs into the newrootfs..."
cp -vf /backup/fstab /mnt/root/etc/
cp -vf /backup/ifcfg-eth0 /mnt/root/etc/sysconfig/network-scripts/
cp -vf /backup/ifcfg-eth1 /mnt/root/etc/sysconfig/network-scripts/
cp -vf /backup/network /mnt/root/etc/sysconfig/

# Post migration steps
mount --bind /dev /mnt/root/dev
mount --bind /proc /mnt/root/proc
mount --bind /sys /mnt/root/sys

chroot /mnt/root grub2-install /dev/sda
chroot /mnt/root grub2-mkconfig -o /boot/grub2/grub.cfg

#Unmount all other mounts so that the ram used by
umount /mnt/root/dev /mnt/root/proc /mnt/root/sys /mnt/root/boot 2>&1 > /dev/null
umount /mnt/root /mnt/home 2>&1 > /dev/null

echo "Rebooting..."
sleep 2
echo 1 > /proc/sys/kernel/sysrq	# Enable SysRq
#echo s > /proc/sysrq-trigger	# Sync all mounted filesystems
echo b > /proc/sysrq-trigger	# Reboot
#echo o > /proc/sysrq-trigger	# Shutdown

#This will only be run if the exec above failed
#echo "Failed to switch_root, dropping to a shell"
#exec /bin/init
